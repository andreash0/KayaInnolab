devtools::document()
devtools::document()
?kaya
devtools::document()
?kaya
devtools::document()
?kaya
devtools::document()
?kaya
usethis::use_package("checkmate")
?checkmate::assert_numeric
checkmate::assert_numeric(-1)
#' See \url{https://en.wikipedia.org/wiki/Kaya_identity} for more details.
#'
#' @param pop Population size (in millions).
#' @param gdp GDP per capita (in 1000$/person).
#' @param enInt Energy Intensity (in Gigajoule/$1000GDP).
#' @param carbInt Carbon Intensity (in tonnes CO2/Gigajoule).
#' @return Total yearly CO2 emissions according to the kaya identity.
#' @examples
#' # Kaya Identity for Germany
#' kaya(82.4, 44, 5, 0.05)
kaya <- function(pop, gdp, enInt, carbInt) {
checkmate::assert_numeric(pop, lower = 0, len = 1, any.missing = FALSE)
checkmate::assert_numeric(gdp, lower = 0, len = 1, any.missing = FALSE)
checkmate::assert_numeric(enInt, lower = 0, len = 1, any.missing = FALSE)
checkmate::assert_numeric(carbInt, lower = 0, len = 1, any.missing = FALSE)
pop * gdp * enInt * carbInt
}
kaya(-1, 2, 3, 4)
kaya("-1", 2, 3, 4)
devtools::document()
?kaya
usethis::use_testthat()
kaya()
kaya(pop = "1", gdp = 3, enInt = 4, carbInt = 5)
kaya(1:4)
params <- c(pop = 2, gdp = 3, enInt = 4, carbInt = 5)
list(params)
kaya(-4)
#' @param enInt Energy Intensity (in Gigajoule/$1000GDP).
#' @param carbInt Carbon Intensity (in tonnes CO2/Gigajoule).
#' @param output_type Output type can be either "CO2" or "C".
#' @return Total yearly CO2 emissions according to the kaya identity.
#' @examples
#' # Kaya Identity for Germany
#' kaya(82.4, 44, 5, 0.05)
#' # Kaya Identity for Germany in C (Carbon)
#' kaya(82.4, 44, 5, 0.05)
#' @export
kaya <- function(pop, gdp, enInt, carbInt, output_type = "CO2") {
checkmate::assert_numeric(pop, lower = 0, len = 1, any.missing = FALSE)
checkmate::assert_numeric(gdp, lower = 0, len = 1, any.missing = FALSE)
checkmate::assert_numeric(enInt, lower = 0, len = 1, any.missing = FALSE)
checkmate::assert_numeric(carbInt, lower = 0, len = 1, any.missing = FALSE)
checkmate::assert_character(output_type, lower = 0, len = 1, any.missing = FALSE)
stopifnot(output_type %in% c("CO2", "C"))
emissions <- pop * gdp * enInt * carbInt
if (output_type == "C") {
emissions <- emissions / 3.67
}
emissions
}
kaya(82.4, 44, 5, 0.05, output_type = "C)
kaya(82.4, 44, 5, 0.05, output_type = "C)
#' @param enInt Energy Intensity (in Gigajoule/$1000GDP).
#' @param carbInt Carbon Intensity (in tonnes CO2/Gigajoule).
#' @param output_type Output type can be either "CO2" or "C".
#' @return Total yearly CO2 emissions according to the kaya identity.
#' @examples
#' # Kaya Identity for Germany
#' kaya(82.4, 44, 5, 0.05)
#' # Kaya Identity for Germany in C (Carbon)
#' kaya(82.4, 44, 5, 0.05, output_type = "C)
#' @export
kaya <- function(pop, gdp, enInt, carbInt, output_type = "CO2") {
checkmate::assert_numeric(pop, lower = 0, len = 1, any.missing = FALSE)
checkmate::assert_numeric(gdp, lower = 0, len = 1, any.missing = FALSE)
checkmate::assert_numeric(enInt, lower = 0, len = 1, any.missing = FALSE)
checkmate::assert_numeric(carbInt, lower = 0, len = 1, any.missing = FALSE)
checkmate::assert_character(output_type, lower = 0, len = 1, any.missing = FALSE)
stopifnot(output_type %in% c("CO2", "C"))
emissions <- pop * gdp * enInt * carbInt
if (output_type == "C") {
emissions <- emissions / 3.67
}
emissions
}
kaya(82.4, 44, 5, 0.05)
#' @param enInt Energy Intensity (in Gigajoule/$1000GDP).
#' @param carbInt Carbon Intensity (in tonnes CO2/Gigajoule).
#' @param output_type Output type can be either "CO2" or "C".
#' @return Total yearly CO2 emissions according to the kaya identity.
#' @examples
#' # Kaya Identity for Germany
#' kaya(82.4, 44, 5, 0.05)
#' # Kaya Identity for Germany in C (Carbon)
#' kaya(82.4, 44, 5, 0.05, output_type = "C)
#' @export
kaya <- function(pop, gdp, enInt, carbInt, output_type = "CO2") {
checkmate::assert_numeric(pop, lower = 0, len = 1, any.missing = FALSE)
checkmate::assert_numeric(gdp, lower = 0, len = 1, any.missing = FALSE)
checkmate::assert_numeric(enInt, lower = 0, len = 1, any.missing = FALSE)
checkmate::assert_numeric(carbInt, lower = 0, len = 1, any.missing = FALSE)
checkmate::assert_character(output_type, lower = 0, len = 1, any.missing = FALSE)
stopifnot(output_type %in% c("CO2", "C"))
emissions <- pop * gdp * enInt * carbInt
if (output_type == "C") {
emissions <- emissions / 3.67
}
emissions
}
kaya(82.4, 44, 5, 0.05)
?checkmate::assert_character
kaya(82.4, 44, 5, 0.05)
#' @param enInt Energy Intensity (in Gigajoule/$1000GDP).
#' @param carbInt Carbon Intensity (in tonnes CO2/Gigajoule).
#' @param output_type Output type can be either "CO2" or "C".
#' @return Total yearly CO2 emissions according to the kaya identity.
#' @examples
#' # Kaya Identity for Germany
#' kaya(82.4, 44, 5, 0.05)
#' # Kaya Identity for Germany in C (Carbon)
#' kaya(82.4, 44, 5, 0.05, output_type = "C)
#' @export
kaya <- function(pop, gdp, enInt, carbInt, output_type = "CO2") {
checkmate::assert_numeric(pop, lower = 0, len = 1, any.missing = FALSE)
checkmate::assert_numeric(gdp, lower = 0, len = 1, any.missing = FALSE)
checkmate::assert_numeric(enInt, lower = 0, len = 1, any.missing = FALSE)
checkmate::assert_numeric(carbInt, lower = 0, len = 1, any.missing = FALSE)
checkmate::assert_character(output_type, any.missing = FALSE)
stopifnot(output_type %in% c("CO2", "C"))
emissions <- pop * gdp * enInt * carbInt
if (output_type == "C") {
emissions <- emissions / 3.67
}
emissions
}
kaya(82.4, 44, 5, 0.05)
kaya(82.4, 44, 5, 0.05, output_type = "C)
kaya(82.4, 44, 5, 0.05, output_type = "C")
devtools::document()
rm(list = c("kaya"))
devtools::document()
devtools::document()
kaya(1, 2, 3, 4, "not_valid_output_type")
#' @param enInt Energy Intensity (in Gigajoule/$1000GDP).
#' @param carbInt Carbon Intensity (in tonnes CO2/Gigajoule).
#' @param output_type Output type can be either "CO2" or "C".
#' @return Total yearly emissions according to the kaya identity in CO2 or C.
#' @examples
#' # Kaya Identity for Germany
#' kaya(82.4, 44, 5, 0.05)
#' # Kaya Identity for Germany in C (Carbon)
#' kaya(82.4, 44, 5, 0.05, output_type = "C")
#' @export
kaya <- function(pop, gdp, enInt, carbInt, output_type = "CO2") {
checkmate::assert_numeric(pop, lower = 0, len = 1, any.missing = FALSE)
checkmate::assert_numeric(gdp, lower = 0, len = 1, any.missing = FALSE)
checkmate::assert_numeric(enInt, lower = 0, len = 1, any.missing = FALSE)
checkmate::assert_numeric(carbInt, lower = 0, len = 1, any.missing = FALSE)
checkmate::assert_character(output_type, any.missing = FALSE)
if (!output_type %in% c("CO2", "C")) stop("output_type must be in c('CO2', 'C'")
emissions <- pop * gdp * enInt * carbInt
if (output_type == "C") {
emissions <- emissions / 3.67
}
emissions
}
kaya(1, 2, 3, 4, "not_valid_output_type")
#' @param enInt Energy Intensity (in Gigajoule/$1000GDP).
#' @param carbInt Carbon Intensity (in tonnes CO2/Gigajoule).
#' @param output_type Output type can be either "CO2" or "C".
#' @return Total yearly emissions according to the kaya identity in CO2 or C.
#' @examples
#' # Kaya Identity for Germany
#' kaya(82.4, 44, 5, 0.05)
#' # Kaya Identity for Germany in C (Carbon)
#' kaya(82.4, 44, 5, 0.05, output_type = "C")
#' @export
kaya <- function(pop, gdp, enInt, carbInt, output_type = "CO2") {
checkmate::assert_numeric(pop, lower = 0, len = 1, any.missing = FALSE)
checkmate::assert_numeric(gdp, lower = 0, len = 1, any.missing = FALSE)
checkmate::assert_numeric(enInt, lower = 0, len = 1, any.missing = FALSE)
checkmate::assert_numeric(carbInt, lower = 0, len = 1, any.missing = FALSE)
checkmate::assert_character(output_type, any.missing = FALSE)
if (!output_type %in% c("CO2", "C")) stop("output_type must be in c('CO2', 'C')")
emissions <- pop * gdp * enInt * carbInt
if (output_type == "C") {
emissions <- emissions / 3.67
}
emissions
}
kaya(1, 2, 3, 4, "not_valid_output_type")
?expect_error
kaya(1, 2, 3, 4, "not_valid_output_type")
expect_error(
kaya(1, 2, 3, 4, "not_valid_output_type"),
"output_type must be in c('CO2', 'C')"
)
#' @param enInt Energy Intensity (in Gigajoule/$1000GDP).
#' @param carbInt Carbon Intensity (in tonnes CO2/Gigajoule).
#' @param output_type Output type can be either "CO2" or "C".
#' @return Total yearly emissions according to the kaya identity in CO2 or C.
#' @examples
#' # Kaya Identity for Germany
#' kaya(82.4, 44, 5, 0.05)
#' # Kaya Identity for Germany in C (Carbon)
#' kaya(82.4, 44, 5, 0.05, output_type = "C")
#' @export
kaya <- function(pop, gdp, enInt, carbInt, output_type = "CO2") {
checkmate::assert_numeric(pop, lower = 0, len = 1, any.missing = FALSE)
checkmate::assert_numeric(gdp, lower = 0, len = 1, any.missing = FALSE)
checkmate::assert_numeric(enInt, lower = 0, len = 1, any.missing = FALSE)
checkmate::assert_numeric(carbInt, lower = 0, len = 1, any.missing = FALSE)
checkmate::assert_character(output_type, any.missing = FALSE)
stopifnot(output_type %in% c("CO2", "C"))
emissions <- pop * gdp * enInt * carbInt
if (output_type == "C") {
emissions <- emissions / 3.67
}
emissions
}
kaya(1, 2, 3, 4, "not_valid_output_type")
library(testthat)
expect_error(
kaya(1, 2, 3, 4, "not_valid_output_type"),
'%in% c("CO2", "C") is not TRUE'
)
expect_error(
kaya(1, 2, 3, 4, "not_valid_output_type"),
'is not TRUE'
)
#' @param enInt Energy Intensity (in Gigajoule/$1000GDP).
#' @param carbInt Carbon Intensity (in tonnes CO2/Gigajoule).
#' @param output_type Output type can be either "CO2" or "C".
#' @return Total yearly emissions according to the kaya identity in CO2 or C.
#' @examples
#' # Kaya Identity for Germany
#' kaya(82.4, 44, 5, 0.05)
#' # Kaya Identity for Germany in C (Carbon)
#' kaya(82.4, 44, 5, 0.05, output_type = "C")
#' @export
kaya <- function(pop, gdp, enInt, carbInt, output_type = "CO2") {
checkmate::assert_numeric(pop, lower = 0, len = 1, any.missing = FALSE)
checkmate::assert_numeric(gdp, lower = 0, len = 1, any.missing = FALSE)
checkmate::assert_numeric(enInt, lower = 0, len = 1, any.missing = FALSE)
checkmate::assert_numeric(carbInt, lower = 0, len = 1, any.missing = FALSE)
checkmate::assert_character(output_type, any.missing = FALSE)
#stopifnot(output_type %in% c("CO2", "C"))
if (!output_type %in% c("CO2", "C")) {
stop("`output_type` must be 'CO2' or 'C'")
}
emissions <- pop * gdp * enInt * carbInt
if (output_type == "C") {
emissions <- emissions / 3.67
}
emissions
}
kaya(1, 2, 3, 4, "not_valid_output_type")
?kaya
devtools::document()
install.packages("boom")
install.packages("Boom")
install.packages("Boom")
install.packages("mcmc")
install.packages("mcmc")
install.packages("mcmc")
